#!/usr/bin/env python3"""Script to conveniently extract genes with HPO termsParameters----------results_dir : str    Path to results directory (can be .)target_hpo : str    HPO terms to extract, separated by comma"""### ---------------------------------------- ###### ------------------MAIN------------------ ###import numpy as npimport pandas as pdfrom os import listdirfrom sys import argv### Parse argsmain_dir = argv[argv.index('--results_dir') + 1]target_hpo = argv[argv.index('--target_hpo') + 1].split(',')### Extract rankingsrank_type_pval_columns = {'integrated_data' : 'final_pval',                          'aberrant_splicing' : 'clusters_min_pval',                          'aberrant_expression' : 'padj',                          'allelic_imbalance' : 'compound_p'}rank_type_effect_columns = {'integrated_data' : 'final_effect',                            'aberrant_splicing' : 'intron_median_abs_effect',                            'aberrant_expression' : 'log2FC',                            'allelic_imbalance' : 'median_ase_score'}subdirs_and_patterns = {'6_data_integration' : ['_gene_ranks_with_hpo-aberrant_expression.tsv.gz',                                                '_gene_ranks_with_hpo-aberrant_splicing.tsv.gz',                                                '_gene_ranks_with_hpo-allelic_imbalance.tsv.gz',                                                '_gene_ranks_with_hpo-integrated_data.tsv.gz']}summary = {}for subdir,patterns in subdirs_and_patterns.items():        if subdir in listdir(main_dir):            for file in listdir(f'{main_dir}/{subdir}'):                        if sum([file.endswith(p) for p in patterns]) == 0:                                continue                        try:                                # Extract sample id                                sample_id = file                for p in patterns:                                        sample_id = sample_id.replace(p, '')                                if sample_id not in summary.keys():                                        summary[sample_id] = {}                                # Extract data type                                analysis_type = ('aberrant_splicing' if 'aberrant_splicing' in file else                                 'aberrant_expression' if 'aberrant_expression' in file else                                 'allelic_imbalance' if 'allelic_imbalance' in file or 'ase' in file else                                 'integrated_data' if 'integrated_data' in file else                                 'integrated_data')                                pval_column = rank_type_pval_columns[analysis_type]                                effect_column = rank_type_effect_columns[analysis_type]                                # Extract data                                data = pd.read_csv(f'{main_dir}/{subdir}/{file}', sep='\t')                                data['hpo_hits'] = data['hpo_hits'].fillna('')                                # Filter                                data = data.loc[[sum([th in h for th in target_hpo]) == len(target_hpo) for h in data['hpo_hits'].values],]                                summary[sample_id][analysis_type] = data.copy()                        except:                                passfor sample_id,sample_summary in summary.items():        with open(f'{sample_id}_hpo_subset_data.tsv', 'w') as output:            for analysis_type,analysis_data in sample_summary.items():                output.write(f'### {analysis_type}\n')                        analysis_data.to_csv(output, sep='\t', index=False, header=True, mode='a')                        output.write('\n')