#!/usr/bin/env python3"""This script takes in an allele count matrix generated by GATK ASEReadCounter and runs a binomialtest for allelic imbalance.Each SNP is tested separately, without considering phasing. Then, for each gene,the Benjamini-Hochberg corrected p-values of SNPs is compounded.PARAMETERS------------ase_counts : string  Path to the allele count matrix--gtf : string  Path to GTF annotation file--min_depth : integer  Minimum raw depth across allelles.  Default = 20"""### ---------------------------------------- ###def parse_args():        print('args = ' + str(argv))        # ASE matrix        ase_matrix_path = argv[argv.index('--ase_counts') + 1]    ase_matrix = pd.read_csv(ase_matrix_path, sep='\t', header=0)        # GTF annotation        gtf_path = argv[argv.index('--gtf') + 1]    gtf = load_gtf(gtf_path)        # Min depth        if '--min_depth' in argv:                min_depth = int(argv[argv.index('--min_depth') + 1])        else:                min_depth = 20        # Filter ASE matrix        ase_matrix = ase_matrix.loc[ase_matrix['rawDepth'] >= min_depth,]        return ase_matrix, gtf### ---------------------------------------- ###def load_gtf(path, desired_biotypes=[], desired_chromosomes=[]):        # Load GTF        gtf_data = pd.read_csv(path, sep='\t', header=None, comment='#', dtype=str)    gtf_data.columns = ['seqname', 'source', 'feature', 'start', 'end', 'score', 'strand', 'frame', 'attribute']    ### Only keep genes and exons    gtf_data = gtf_data.loc[gtf_data.feature.isin(['gene', 'exon']), ['seqname', 'start', 'end', 'strand', 'attribute']]        # Get biotype and gene id    biotypes, gene_ids, gene_symbols, transcript_ids, exon_ids = [], [], [], [], []    for _,row in gtf_data.iterrows():                info = row.values[-1]                biotype = re.findall('gene_biotype "\w+";', info)[0]        biotype = biotype.replace('gene_biotype ', '').replace(';', '').replace('"', '')                biotypes.append(biotype)                gene = re.findall('gene_id "\w+";', info)[0]        gene = gene.replace('gene_id ', '').replace(';', '').replace('"', '')                gene_ids.append(gene)                if 'gene_name' in info:                        gene = info[info.index('gene_name "') + len('gene_name "'):]            gene = gene[:gene.index('"')]                else:                        gene = ''                gene_symbols.append(gene)                if 'transcript_id' in info:                        transcript = info[info.index('transcript_id "') + len('transcript_id "'):]            transcript = transcript[:transcript.index('"')]                else:                        transcript = ''                transcript_ids.append(transcript)                if 'exon_id' in info:                        exon = info[info.index('exon_id "') + len('exon_id "'):]            exon = exon[:exon.index('"')]                else:                        exon = ''                exon_ids.append(exon)    gtf_data['biotype'] = biotypes    gtf_data['gene_id'] = gene_ids    gtf_data['gene_symbol'] = gene_symbols    gtf_data['transcript_id'] = transcript_ids    gtf_data['exon_id'] = exon_ids        # Filter based on biotype        if len(desired_biotypes):        gtf_data = gtf_data.loc[gtf_data.biotype.isin(desired_biotypes),]    # Filter for desired chromosomes    if len(desired_chromosomes):        gtf_data = gtf_data.loc[gtf_data.seqname.isin(desired_chromosomes),]        # Remove genes without gene_symbol        #gtf_data = gtf_data.loc[gtf_data['gene_symbol'] != '',]        # Fix dtypes        gtf_data[['start', 'end']] = gtf_data[['start', 'end']].astype(int)        return gtf_data### ---------------------------------------- ###def annotate_variant(c, p, annot):        # N.B. To make this step faster, whether the SNP falls in an exon or not is not checked        candidate_gene = annot.loc[(annot['seqname'] == c) &                               (annot['start'] <= p) &                               (annot['end'] >= p),]        if not candidate_gene.shape[0]:                return ''        else:                return ';'.join(np.unique(candidate_gene.gene_id.values))### ------------------MAIN------------------ ###import numpy as npimport pandas as pdimport refrom scipy.stats import binomfrom statsmodels.stats.multitest import fdrcorrectionfrom sys import argv### Parse argsase_matrix, gtf = parse_args()### Remove 0 refCount & altCountase_matrix = ase_matrix.loc[(ase_matrix['refCount'] != 0) |                            (ase_matrix['altCount'] != 0),]### Annotate variantsase_matrix.loc[:, 'gene_id'] = [annotate_variant(cntg, pos, gtf)                                for _,(cntg,pos) in ase_matrix[['contig', 'position']].iterrows()]### Calculate ase_scorease_matrix.loc[:, 'ase_score'] = [abs(max(ref_n, alt_n) /                                      (ref_n + alt_n) - 0.5) +                                  0.5                                  for _,(ref_n,alt_n) in ase_matrix[['refCount', 'altCount']].iterrows()]median_score = np.median(ase_matrix['ase_score'].values)### Binomial testase_matrix.loc[:, 'pval'] = [binom.sf(max(ref_n, alt_n), ref_n + alt_n, median_score, loc=0)                             for _,(ref_n,alt_n) in ase_matrix[['refCount', 'altCount']].iterrows()]ase_matrix.loc[:, 'padj'] = fdrcorrection(ase_matrix['pval'].values, alpha=0.05, is_sorted=False)[1]### Save analysisase_matrix.to_csv('ase_snp_stats.tsv.gz', sep='\t', index=False, header=True)### Summarize at gene levelgene_analysis = []gene_analysis_header = ['gene_id', 'gene_symbol', 'gene_biotype', 'contig', 'start', 'end', 'strand',                        'n_snps', 'best_ase_score', 'median_ase_score', 'best_p', 'compound_p']unique_genes = np.unique(';'.join(ase_matrix.gene_id.values).split(';'))for gene_id in unique_genes:        if not len(gene_id):                continue        # Gene info        gtf_sub = gtf.loc[gtf['gene_id'] == gene_id,]        contig, start, end, strand, _, biotype, _, gene_symbol, *_ = gtf_sub.iloc[0,]        # ASE stats        ase_sub = ase_matrix.loc[[gene_id in gid for gid in ase_matrix.gene_id],]    n_snps = ase_sub.shape[0]        best_ase_score, median_ase_score = np.min(ase_sub['ase_score']), np.median(ase_sub['ase_score'])        best_p, compound_p = np.min(ase_sub['padj']), np.prod(ase_sub['ase_score'])        # Store data        gene_analysis.append([gene_id, gene_symbol, biotype, contig, start, end, strand,                          n_snps, best_ase_score, median_ase_score, best_p, compound_p])gene_analysis = pd.DataFrame(gene_analysis, columns=gene_analysis_header)gene_analysis.to_csv('ase_gene_stats.tsv.gz', sep='\t', index=False, header=True)