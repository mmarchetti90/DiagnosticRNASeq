#!/usr/bin/env python3"""This script reads in a SJ.out.tab file generated by STAR and converts it to bedBed output is written to stdoutArguments-----------file_path : required    Path to SJ.out.tab file--filter : optional    If specified, junctions will be filtered"""### ---------------------------------------- ###### ------------------MAIN------------------ ###from sys import argv### Input file pathsj_file = argv[argv.index('--file_path') + 1]### Parse file and convert to bedmin_reads = 10max_reads = 50with open(sj_file, 'r') as sj_data:        # Header line        print('track name=SJ useScore=1')        # Body        for n,line in enumerate(sj_data):                if not len(line):                        continue                contig, start, end, strand, intron_motif, annotation, unique_reads, multi_mapping_reads, overhang = line.split('\t')                strand = ('.' if strand == '0' else                  '+' if strand == '1' else                  '-')        unique_reads = int(unique_reads)                overhang = int(overhang)        sj_len = int(end) - int(start)                score = (0 if unique_reads < min_reads else                 500 * min(1, (unique_reads - min_reads) / (max_reads - min_reads)) + 500)        score = round(score, 0)        # Filtering        # See https://support.illumina.com/content/dam/illumina-support/help/Illumina_DRAGEN_Bio_IT_Platform_v3_7_1000000141465/Content/SW/Informatics/Dragen/TPipelineSJ_fDG.htm                if '--filter' in argv:                    if intron_motif == '0' and (unique_reads < 3 or overhang < 30):                                continue                        elif overhang < 12:                                continue                        elif sj_len > 2e5 and unique_reads < 4:                                continue                        elif sj_len > 1e5 and unique_reads < 3:                                continue                        elif sj_len > 5e4 and unique_reads < 2:                                continue                        else:                                pass                # StdOut        bed_format = '\t'.join([contig, start, end, 'SJ' + str(n + 1), str(score), strand, start, end])                print(bed_format)